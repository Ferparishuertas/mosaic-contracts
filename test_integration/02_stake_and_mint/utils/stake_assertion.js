// Copyright 2019 OpenST Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ----------------------------------------------------------------------------
//
// http://www.simpletoken.org/
//
// ----------------------------------------------------------------------------

const assert = require('assert');

/**
 *  Class to assert event and balances after stake
 */
class StakeAssertion {
    /**
     * @param gateway Truffle gateway instance.
     * @param token Truffle token instance.
     * @param baseToken Truffle baseToken instance.
     */
    constructor(gateway, token, baseToken) {
        this.gateway = gateway;
        this.token = token;
        this.baseToken = baseToken;
    }

    /**
     *  This verifies event and balances.
     *
     * @param event Event object after decoding.
     * @param stakeRequest Stake request. {amount: *, gasPrice: *,gasLimit:*
     * , hashLock: *, unlockSecret:*, staker:*, bounty:*, nonce:*,
      * beneficiary:*}
     *
     * @param initialBalances Initial baseToken and token balances
     */
    async verify(event, stakeRequest, initialBalances) {
        await this._assertBalancesForStake(stakeRequest, initialBalances);

        StakeAssertion._assertStakeEvent(event, stakeRequest);
    }

    /**
     * This capture basetoken and token balance of gateway and staker.
     *
     * @param staker
     * @return {Promise<{baseToken: {gateway: *, staker: *}, token: {gateway: *, staker: *}}>}
     */
    async captureBalances(staker) {
        return {
            baseToken: {
                gateway: await this.baseToken.balanceOf(this.gateway.address),
                staker: await this.baseToken.balanceOf(staker),
            },
            token: {
                gateway: await this.token.balanceOf(this.gateway.address),
                staker: await this.token.balanceOf(staker),
            },
        };
    }

    /**
     * This asserts balances of staker and gateway  after stake.
     * @param stakeRequest
     * @param initialBalances Initial balance of staker and gateway
     *                        generated by captureBalances method/
     * @private
     */
    async _assertBalancesForStake(stakeRequest, initialBalances) {
        const finalBalances = await this.captureBalances(stakeRequest.staker);

        // Assert gateway balance
        const expectedGatewayBaseTokenBalance = initialBalances.baseToken.gateway
            .add(stakeRequest.bounty);

        // Assert bounty is transferred to gateway.
        assert.strictEqual(
            expectedGatewayBaseTokenBalance.eq(finalBalances.baseToken.gateway),
            true,
            `Gateway base token balance must be ${expectedGatewayBaseTokenBalance.toString(10)}`
           + ` instead of ${finalBalances.baseToken.gateway.toString(10)}`,
        );

        const expectedGatewayTokenBalance = initialBalances.token.gateway
            .add(stakeRequest.amount);

        // Assert stake amount is transferred to gateway.
        assert.strictEqual(
            expectedGatewayTokenBalance.eq(finalBalances.token.gateway),
            true,
            `Gateway token balance must be ${expectedGatewayBaseTokenBalance.toString(10)}`
           + ` instead of ${finalBalances.token.gateway.toString(10)}`,
        );

        // Assert staker balance
        const expectedStakerBaseTokenBalance = initialBalances.baseToken.staker
            .sub(stakeRequest.bounty);

        // Assert bounty is transferred to gateway.
        assert.strictEqual(
            expectedStakerBaseTokenBalance.eq(finalBalances.baseToken.staker),
            true,
            `Staker base token balance must be ${expectedStakerBaseTokenBalance.toString(10)}`
           + ` instead of ${finalBalances.baseToken.staker.toString(10)}`,
        );

        const expectedStakerTokenBalance = initialBalances.token.staker
            .sub(stakeRequest.amount);

        // Assert stake amount is transferred from staker.
        assert.strictEqual(
            expectedStakerTokenBalance.eq(finalBalances.token.staker),
            true,
            `Staker token balance must be ${expectedStakerTokenBalance.toString(10)}`
           + ` instead of ${finalBalances.token.staker.toString(10)}`,
        );
    }

    /**
     * This assert event after stake method.
     * @param event
     * @param stakeRequest
     * @private
     */
    static _assertStakeEvent(event, stakeRequest) {
        const eventData = event.StakeIntentDeclared;

        assert.strictEqual(
            eventData._staker,
            stakeRequest.staker,
            `Staker address from event ${eventData._staker} must be equal to ${stakeRequest.staker}.`,
        );

        assert.strictEqual(
            stakeRequest.nonce.eq(eventData._stakerNonce),
            true,
            `Staker nonce from event ${eventData._stakerNonce} 
            must be equal to ${stakeRequest.nonce.toString(10)}.`,
        );

        assert.strictEqual(
            eventData._beneficiary,
            stakeRequest.beneficiary,
            `Beneficiary address from event ${eventData._beneficiary} 
            must be equal to ${stakeRequest.beneficiary}.`,
        );

        assert.strictEqual(
            stakeRequest.amount.eq(eventData._amount),
            true,
            `Amount from event ${eventData._amount} must be equal 
            to ${stakeRequest.amount.toString(10)}.`,
        );
    }
}

module.exports = StakeAssertion;
